# renzo_bot.py (–°—ñ–∑–¥—ñ“£ Telegram –±–æ—Ç ‚Äî —Ç–æ–ª—ã“õ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–º–µ–Ω)

import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.dispatcher.filters import Command
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
import logging
from aiogram.types import InputFile


# ========== CONFIG ==========
TOKEN = "7838676161:AAHt0qJoMwcezd_b1IHKUSAWjBsI2t9qpdw"
ADMIN_ID = 8100416617
KASPI_NUMBER = "+7 708 602 4478"
OWNER_NAME = "–†–∞—É—à–∞–Ω–≥—É–ª.–ë"
PRODUCT_FILE = "products.json"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

# ========== STATES ==========
class PurchaseState(StatesGroup):
    waiting_for_payment = State()
    waiting_for_review = State()
    waiting_for_code = State()

# ========== UTILS ==========
def load_products():
    if os.path.exists(PRODUCT_FILE):
        with open(PRODUCT_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_products(data):
    with open(PRODUCT_FILE, 'w') as f:
        json.dump(data, f, indent=2)

# ========== START ==========
@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"))

    photo = InputFile("IMG_20250614_232103_449.jpg")  # –ª–æ–∫–∞–ª —Å—É—Ä–µ—Ç

    await message.answer_photo(
        photo=photo,
        caption=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –±–æ—Ç –†–ï–ù–ó–û!\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ üëá",
        reply_markup=kb
    )
# ========== –ö–ê–¢–ï–ì–û–†–ò–ò ==========
@dp.message_handler(text="üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: types.Message):
    data = load_products()
    if not data:
        return await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    kb = InlineKeyboardMarkup()
    for cat in data:
        count = len(data[cat])
        kb.add(InlineKeyboardButton(f"{cat} ({count})", callback_data=f"cat_{cat}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def show_items(call: types.CallbackQuery):
    cat = call.data.split("_", 1)[1]
    data = load_products()
    items = data.get(cat, [])
    if not items:
        return await call.message.answer("–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
    kb = InlineKeyboardMarkup()
    for idx, item in enumerate(items):
        kb.add(InlineKeyboardButton(f"{item}", callback_data=f"buy_{cat}_{idx}"))
    await call.message.answer(f"–¢–æ–≤–∞—Ä—ã –≤ {cat}:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("buy_"))
async def handle_buy(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(item=call.data)
    await bot.send_message(call.from_user.id, f"üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ 700 —Ç–≥\nüì± Kaspi: {KASPI_NUMBER}\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —Å—é–¥–∞ (—Ñ–æ—Ç–æ –∏–ª–∏ PDF)")
    await state.set_state(PurchaseState.waiting_for_payment.state)

@dp.message_handler(content_types=types.ContentType.ANY, state=PurchaseState.waiting_for_payment)
async def handle_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await bot.send_message(ADMIN_ID, f"üßæ –ù–æ–≤—ã–π —á–µ–∫ –æ—Ç @{message.from_user.username or message.from_user.full_name}!")
    if message.photo:
        await bot.send_photo(ADMIN_ID, message.photo[-1].file_id)
    elif message.document:
        await bot.send_document(ADMIN_ID, message.document.file_id)
    await bot.send_message(ADMIN_ID, f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä: /send_number {message.from_user.id} <–Ω–æ–º–µ—Ä>")
    await state.finish()

# ========== SEND NUMBER ==========
@dp.message_handler(Command("send_number"), user_id=ADMIN_ID)
async def send_number(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.reply("–§–æ—Ä–º–∞—Ç: /send_number <user_id> <–Ω–æ–º–µ—Ä>")
    user_id = int(parts[1])
    number = parts[2]
    msg = (f"‚úÖ –°–¥–µ–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∞!\n\n"
           f"üì± –ù–æ–º–µ—Ä: {number}\nüë§ –ò–º—è –≤–ª–∞–¥–µ–ª—å—Ü–∞: {OWNER_NAME}\n\n"
           "‚ùó –í–∞–∂–Ω–æ:\n–ü–æ—Å–ª–µ –≤—Ö–æ–¥–∞ –≤ –∞–∫–∫–∞—É–Ω—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:\n"
           "üîπ –°–º–µ–Ω–∏—Ç–µ –ø–æ—á—Ç—É\nüîπ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –æ–±–ª–∞—á–Ω—ã–π –ø–∞—Ä–æ–ª—å\nüîπ –í–∫–ª—é—á–∏—Ç–µ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é\n\n"
           "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ!\n\n‚úçÔ∏è –û—Å—Ç–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∑—ã–≤ –æ –±–æ—Ç–µ üëá")
    await bot.send_message(user_id, msg)
    await bot.send_message(user_id, "‚úçÔ∏è –ß—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞.")

# ========== –û–¢–ó–´–í ==========
@dp.message_handler(lambda m: m.chat.id != ADMIN_ID)
async def receive_review(message: types.Message):
    await bot.send_message(ADMIN_ID, f"üí¨ –û—Ç–∑—ã–≤ –æ—Ç @{message.from_user.username or message.from_user.full_name}:\n{message.text}")

# ========== –ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨ ==========
@dp.message_handler(commands=['admin'], user_id=ADMIN_ID)
async def admin_panel(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è"), KeyboardButton("‚ûï –¢–æ–≤–∞—Ä"))
    kb.add(KeyboardButton("üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"))
    await message.answer("–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∞:", reply_markup=kb)

@dp.message_handler(text="‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è", user_id=ADMIN_ID)
async def add_category(message: types.Message):
    await message.answer("–ñ–∞“£–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∞—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await PurchaseState.waiting_for_review.set()

@dp.message_handler(state=PurchaseState.waiting_for_review, user_id=ADMIN_ID)
async def save_category(message: types.Message, state: FSMContext):
    data = load_products()
    cat = message.text.strip()
    if cat not in data:
        data[cat] = []
        save_products(data)
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat}' “õ–æ—Å—ã–ª–¥—ã")
    else:
        await message.answer("‚ùó –ë“±–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—è –±“±—Ä—ã–Ω–Ω–∞–Ω –±–∞—Ä")
    await state.finish()

@dp.message_handler(text="‚ûï –¢–æ–≤–∞—Ä", user_id=ADMIN_ID)
async def ask_category_for_item(message: types.Message):
    data = load_products()
    if not data:
        return await message.answer("–ê–ª–¥—ã–º–µ–Ω –∫–∞—Ç–µ–≥–æ—Ä–∏—è “õ–æ—Å—ã“£—ã–∑")
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in data:
        kb.add(KeyboardButton(cat))
    await message.answer("“ö–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—è“ì–∞ —Ç–æ–≤–∞—Ä “õ–æ—Å–∞“£—ã–∑?", reply_markup=kb)
    await PurchaseState.waiting_for_review.set()

@dp.message_handler(state=PurchaseState.waiting_for_review, user_id=ADMIN_ID)
async def receive_item_category(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text.strip())
    await message.answer("–¢–æ–≤–∞—Ä –∞—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await PurchaseState.waiting_for_code.set()

@dp.message_handler(state=PurchaseState.waiting_for_code, user_id=ADMIN_ID)
async def save_item(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data.get("category")
    item = message.text.strip()
    products = load_products()
    if category in products:
        products[category].append(item)
        save_products(products)
        await message.answer(f"‚úÖ –¢–æ–≤–∞—Ä '{item}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é '{category}'")
    else:
        await message.answer("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    await state.finish()

# ========== START POLLING ==========
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
