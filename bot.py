import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command
import logging
from aiogram.types import InputFile

TOKEN = "7838676161:AAHt0qJoMwcezd_b1IHKUSAWjBsI2t9qpdw"
ADMIN_ID = 8100416617
KASPI_NUMBER = "+7 708 602 4478"
OWNER_NAME = "–†–∞—É—à–∞–Ω–≥—É–ª.–ë"
PRODUCT_FILE = "products.json"

logging.basicConfig(level=logging.INFO)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class AddCategory(StatesGroup):
    waiting_for_category = State()

class AddProduct(StatesGroup):
    waiting_for_cat = State()
    waiting_for_name = State()
    waiting_for_price = State()

class EditProduct(StatesGroup):
    waiting_for_cat = State()
    waiting_for_index = State()
    waiting_for_new_value = State()

class DeleteProduct(StatesGroup):
    waiting_for_cat = State()
    waiting_for_index = State()

class Purchase(StatesGroup):
    waiting_for_payment = State()
    waiting_for_code_request = State()

def load_products():
    if os.path.exists(PRODUCT_FILE):
        with open(PRODUCT_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_products(data):
    with open(PRODUCT_FILE, 'w') as f:
        json.dump(data, f, indent=2)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"))
    photo = InputFile("IMG_20250614_232103_449.jpg")
    await message.answer_photo(
        photo=photo,
        caption=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –±–æ—Ç –†–ï–ù–ó–û!\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ üëá",
        reply_markup=kb
    )

@dp.message_handler(text="üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: types.Message):
    data = load_products()
    if not data:
        return await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –∂–æ“õ.")
    kb = InlineKeyboardMarkup()
    for cat in data:
        kb.add(InlineKeyboardButton(f"{cat} ({len(data[cat])})", callback_data=f"cat_{cat}"))
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def show_items(call: types.CallbackQuery):
    cat = call.data.split("_", 1)[1]
    data = load_products()
    items = data.get(cat, [])
    if not items:
        return await call.message.answer("–ë“±–ª –∫–∞—Ç–µ–≥–æ—Ä–∏—è–¥–∞ —Ç–∞—É–∞—Ä –∂–æ“õ.")
    kb = InlineKeyboardMarkup()
    for i, item in enumerate(items):
        kb.add(InlineKeyboardButton(f"{item['name']} ({item['price']}—Ç–≥)", callback_data=f"buy_{cat}_{i}"))
    await call.message.answer(f"{cat} —ñ—à—ñ–Ω–¥–µ–≥—ñ —Ç–∞—É–∞—Ä–ª–∞—Ä:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("buy_"))
async def handle_buy(call: types.CallbackQuery, state: FSMContext):
    _, cat, index = call.data.split("_")
    data = load_products()
    item = data[cat][int(index)]
    await state.update_data(category=cat, index=index, item=item)
    await call.message.answer(f"üí∞ {item['name']} –±–∞“ì–∞—Å—ã: {item['price']} —Ç–≥\nKaspi: {KASPI_NUMBER}\n–ß–µ–∫ –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:")
    await state.set_state(Purchase.waiting_for_payment)

@dp.message_handler(content_types=types.ContentType.ANY, state=Purchase.waiting_for_payment)
async def handle_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    item = user_data['item']
    await bot.send_message(ADMIN_ID, f"üì• @{message.from_user.username or message.from_user.full_name} —á–µ–∫ –∂—ñ–±–µ—Ä–¥—ñ.\n–¢–∞—É–∞—Ä: {item['name']} ({item['price']} —Ç–≥)")
    if message.photo:
        await bot.send_photo(ADMIN_ID, message.photo[-1].file_id)
    elif message.document:
        await bot.send_document(ADMIN_ID, message.document.file_id)
    await bot.send_message(ADMIN_ID, f"–û—Å—ã “õ–æ–ª–¥–∞–Ω—É—à—ã“ì–∞ –Ω–æ–º–µ—Ä –∂—ñ–±–µ—Ä—ñ“£—ñ–∑:\n/send_number {message.from_user.id} <–Ω–æ–º–µ—Ä>")
    await state.finish()

@dp.message_handler(Command("send_number"), user_id=ADMIN_ID)
async def send_number(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.reply("“ö–∞—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /send_number <user_id> <–Ω–æ–º–µ—Ä>")
    user_id = int(parts[1])
    number = parts[2]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üîë –ö–æ–¥ –∞–ª—É"))
    await bot.send_message(user_id,
        f"üì± –ù–æ–º–µ—Ä—ñ“£—ñ–∑: {number}\nüë§ –ò–µ—Å—ñ: {OWNER_NAME}\n\n‚ùó –ï—Å—ñ“£—ñ–∑–¥–µ –±–æ–ª—Å—ã–Ω:\n- “ö“±–ø–∏—è—Å”©–∑–¥—ñ ”©–∑–≥–µ—Ä—Ç—ñ“£—ñ–∑\n- “ö–æ—Å —Ñ–∞–∫—Ç–æ—Ä–ª—ã “õ–æ—Ä“ì–∞—É–¥—ã “õ–æ—Å—ã“£—ã–∑",
        reply_markup=kb)

@dp.message_handler(text="üîë –ö–æ–¥ –∞–ª—É")
async def ask_code(message: types.Message):
    await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è @{message.from_user.username or message.from_user.full_name} –∫–æ–¥ —Å“±—Ä–∞–ø –∂–∞—Ç—ã—Ä.\n–ñ—ñ–±–µ—Ä—ñ“£—ñ–∑: /send_code {message.from_user.id} <–∫–æ–¥>")
    await message.answer("‚úÖ –ê–¥–º–∏–Ω–≥–µ —Ö–∞–±–∞—Ä –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ. –ö“Ø—Ç—ñ“£—ñ–∑...")

@dp.message_handler(Command("send_code"), user_id=ADMIN_ID)
async def send_sms_code(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.reply("“ö–∞—Ç–µ —Ñ–æ—Ä–º–∞—Ç: /send_code <user_id> <–∫–æ–¥>")
    user_id = int(parts[1])
    code = parts[2]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –ö—ñ—Ä–¥—ñ–º"), KeyboardButton("‚ùå –ö—ñ—Ä–µ –∞–ª–º–∞–¥—ã–º"))
    await bot.send_message(user_id, f"üîë –°—ñ–∑–¥—ñ“£ –∫–æ–¥—ã“£—ã–∑: {code}", reply_markup=kb)

@dp.message_handler(text="‚úÖ –ö—ñ—Ä–¥—ñ–º")
async def success_login(message: types.Message):
    await message.answer("üôè –†–∞“õ–º–µ—Ç! –ü—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä—É—ã“£—ã–∑–¥—ã —Å“±—Ä–∞–π–º—ã–∑.")
    await bot.send_message(ADMIN_ID, f"‚úÖ @{message.from_user.username} —Å”ô—Ç—Ç—ñ –∫—ñ—Ä–¥—ñ.")
    
@dp.message_handler(text="‚ùå –ö—ñ—Ä–µ –∞–ª–º–∞–¥—ã–º")
async def failed_login(message: types.Message):
    await message.answer("“ö–∏—ã–Ω–¥—ã“õ –±–æ–ª—Å–∞, @renzokzh –ø—Ä–æ—Ñ–∏–ª—ñ–Ω–µ –∂–∞–∑—ã“£—ã–∑.")

# --- –û—Ç–∑—ã–≤—Ç–∞—Ä ---
@dp.message_handler(lambda m: m.chat.id != ADMIN_ID)
async def review(message: types.Message):
    await bot.send_message(ADMIN_ID, f"üí¨ @{message.from_user.username or message.from_user.full_name} –ø—ñ–∫—ñ—Ä—ñ:\n{message.text}")

# --- –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å ---
@dp.message_handler(commands=['admin'], user_id=ADMIN_ID)
async def admin(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è"), KeyboardButton("‚ûï –¢–æ–≤–∞—Ä"))
    kb.add(KeyboardButton("üóë –¢–∞—É–∞—Ä–¥—ã ”©—à—ñ—Ä—É"), KeyboardButton("‚úèÔ∏è –¢–∞—É–∞—Ä–¥—ã ”©–∑–≥–µ—Ä—Ç—É"))
    await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—ñ:", reply_markup=kb)

@dp.message_handler(text="‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è", user_id=ADMIN_ID)
async def add_cat_start(message: types.Message):
    await message.answer("–ñ–∞“£–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –∞—Ç–∞—É—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await AddCategory.waiting_for_category.set()

@dp.message_handler(state=AddCategory.waiting_for_category, user_id=ADMIN_ID)
async def add_cat_save(message: types.Message, state: FSMContext):
    data = load_products()
    cat = message.text.strip()
    if cat not in data:
        data[cat] = []
        save_products(data)
        await message.answer("‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è “õ–æ—Å—ã–ª–¥—ã")
    else:
        await message.answer("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è –±“±—Ä—ã–Ω–Ω–∞–Ω –±–∞—Ä")
    await state.finish()

@dp.message_handler(text="‚ûï –¢–æ–≤–∞—Ä", user_id=ADMIN_ID)
async def add_prod_start(message: types.Message):
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞—Ç–∞—É—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await AddProduct.waiting_for_cat.set()

@dp.message_handler(state=AddProduct.waiting_for_cat, user_id=ADMIN_ID)
async def add_prod_cat(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text.strip())
    await message.answer("–¢–∞—É–∞—Ä –∞—Ç–∞—É—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await AddProduct.waiting_for_name.set()

@dp.message_handler(state=AddProduct.waiting_for_name, user_id=ADMIN_ID)
async def add_prod_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text.strip())
    await message.answer("–ë–∞“ì–∞—Å—ã–Ω –∂–∞–∑—ã“£—ã–∑ (—Ç–µ–∫ —Å–∞–Ω):")
    await AddProduct.waiting_for_price.set()

@dp.message_handler(state=AddProduct.waiting_for_price, user_id=ADMIN_ID)
async def add_prod_price(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cat, name, price = data["category"], data["name"], message.text.strip()
    products = load_products()
    if cat in products:
        products[cat].append({"name": name, "price": price})
        save_products(products)
        await message.answer("‚úÖ –¢–∞—É–∞—Ä “õ–æ—Å—ã–ª–¥—ã")
    else:
        await message.answer("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–∞–±—ã–ª–º–∞–¥—ã")
    await state.finish()

@dp.message_handler(text="üóë –¢–∞—É–∞—Ä–¥—ã ”©—à—ñ—Ä—É", user_id=ADMIN_ID)
async def delete_product_start(message: types.Message):
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞—Ç–∞—É—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await DeleteProduct.waiting_for_cat.set()

@dp.message_handler(state=DeleteProduct.waiting_for_cat, user_id=ADMIN_ID)
async def delete_prod_cat(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text.strip())
    await message.answer("“ö–∞–π –∏–Ω–¥–µ–∫—Å (0, 1, 2...) —Ç–∞—É–∞—Ä–¥—ã ”©—à—ñ—Ä—É –∫–µ—Ä–µ–∫?")
    await DeleteProduct.waiting_for_index.set()

@dp.message_handler(state=DeleteProduct.waiting_for_index, user_id=ADMIN_ID)
async def delete_prod_done(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cat, index = data["category"], int(message.text.strip())
    products = load_products()
    if cat in products and 0 <= index < len(products[cat]):
        deleted = products[cat].pop(index)
        save_products(products)
        await message.answer(f"‚úÖ ”®—à—ñ—Ä—ñ–ª–¥—ñ: {deleted['name']}")
    else:
        await message.answer("‚ùó “ö–∞—Ç–µ –∏–Ω–¥–µ–∫—Å –Ω–µ–º–µ—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
    await state.finish()

# --- START ---
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
