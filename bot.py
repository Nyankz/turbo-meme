import json
import os
from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher.filters import Command
from aiogram.types import InputFile

TOKEN = "7838676161:AAHt0qJoMwcezd_b1IHKUSAWjBsI2t9qpdw"
ADMIN_ID = 8100416617
OWNER_NAME = "–†–∞—É—à–∞–Ω–≥—É–ª.–ë"
KASPI_NUMBER = "+7 708 602 4478"
PRODUCT_FILE = "products.json"

bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

class PurchaseState(StatesGroup):
    waiting_for_payment = State()
    waiting_for_category = State()
    waiting_for_item = State()
    waiting_for_number = State()
    waiting_for_code_request = State()
    waiting_for_code_send = State()
    waiting_for_review = State()

def load_products():
    if os.path.exists(PRODUCT_FILE):
        with open(PRODUCT_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_products(data):
    with open(PRODUCT_FILE, 'w') as f:
        json.dump(data, f, indent=2)

@dp.message_handler(commands=['start'])
async def cmd_start(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"))
    photo = InputFile("IMG_20250614_232103_449.jpg")
    await message.answer_photo(
        photo=photo,
        caption=f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n–í—ã –ø–æ–ø–∞–ª–∏ –Ω–∞ –ø—Ä–æ–¥–∞–∂–∞ –±–æ—Ç –†–ï–ù–ó–û!\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ? –í—ã–±–µ—Ä–∏—Ç–µ –Ω–∏–∂–µ üëá",
        reply_markup=kb
    )

@dp.message_handler(text="üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")
async def show_categories(message: types.Message):
    data = load_products()
    if not data:
        return await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
    kb = InlineKeyboardMarkup()
    for cat in data:
        kb.add(InlineKeyboardButton(f"{cat}", callback_data=f"cat_{cat}"))
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("cat_"))
async def show_items(call: types.CallbackQuery):
    cat = call.data[4:]
    data = load_products()
    items = data.get(cat, [])
    if not items:
        return await call.message.answer("–¢–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç.")
    kb = InlineKeyboardMarkup()
    for idx, item in enumerate(items):
        kb.add(InlineKeyboardButton(item, callback_data=f"buy_{cat}_{idx}"))
    await call.message.answer(f"–¢–æ–≤–∞—Ä—ã –≤ {cat}:", reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("buy_"))
async def handle_buy(call: types.CallbackQuery, state: FSMContext):
    await state.update_data(item=call.data)
    await bot.send_message(call.from_user.id, f"üí∞ –û–ø–ª–∞—Ç–∏—Ç–µ 700 —Ç–≥\nüì± Kaspi: {KASPI_NUMBER}\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ —Å—é–¥–∞ (—Ñ–æ—Ç–æ)")
    await state.set_state(PurchaseState.waiting_for_payment)

@dp.message_handler(content_types=types.ContentType.ANY, state=PurchaseState.waiting_for_payment)
async def handle_payment(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    await bot.send_message(ADMIN_ID, f"üßæ –ß–µ–∫ –æ—Ç @{message.from_user.username or message.from_user.full_name}")
    if message.photo:
        await bot.send_photo(ADMIN_ID, message.photo[-1].file_id)
    elif message.document:
        await bot.send_document(ADMIN_ID, message.document.file_id)
    await bot.send_message(ADMIN_ID, f"–ù–æ–º–µ—Ä –∂—ñ–±–µ—Ä—É: /send_number {message.from_user.id} <–Ω–æ–º–µ—Ä>")
    await state.finish()

@dp.message_handler(Command("send_number"), user_id=ADMIN_ID)
async def send_number(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.reply("–§–æ—Ä–º–∞—Ç: /send_number <user_id> <–Ω–æ–º–µ—Ä>")
    user_id = int(parts[1])
    number = parts[2]
    kb = InlineKeyboardMarkup().add(InlineKeyboardButton("üîë –ö–æ–¥ –∞–ª—É", callback_data=f"code_request_{user_id}"))
    msg = (f"‚úÖ –ù–æ–º–µ—Ä: {number}\nüë§ –ò–µ—Å—ñ: {OWNER_NAME}\n\n"
           "–ï–Ω–¥—ñ —Å–º—Å –∫–æ–¥—Ç—ã –∞–ª—É “Ø—à—ñ–Ω —Ç”©–º–µ–Ω–¥–µ–≥—ñ –±–∞—Ç—ã—Ä–º–∞–Ω—ã –±–∞—Å—ã“£—ã–∑.")
    await bot.send_message(user_id, msg, reply_markup=kb)

@dp.callback_query_handler(lambda c: c.data.startswith("code_request_"))
async def user_requests_code(call: types.CallbackQuery):
    user_id = call.from_user.id
    await bot.send_message(ADMIN_ID, f"üîê –ö–æ–¥ —Å“±—Ä–∞–ø —Ç“±—Ä: @{call.from_user.username or call.from_user.full_name}\n–ñ—ñ–±–µ—Ä—É “Ø—à—ñ–Ω: /send_code {user_id} <–∫–æ–¥>")
    await call.message.edit_reply_markup()  # Remove button

@dp.message_handler(Command("send_code"), user_id=ADMIN_ID)
async def send_sms_code(message: types.Message):
    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        return await message.reply("–§–æ—Ä–º–∞—Ç: /send_code <user_id> <–∫–æ–¥>")
    user_id = int(parts[1])
    code = parts[2]
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚úÖ –ö—ñ—Ä–¥—ñ–º"), KeyboardButton("‚ùå –ö—ñ—Ä–µ –∞–ª–º–∞–¥—ã–º"))
    await bot.send_message(user_id, f"üîê –°—ñ–∑–¥—ñ“£ SMS –∫–æ–¥: {code}", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚úÖ –ö—ñ—Ä–¥—ñ–º")
async def handle_success_login(message: types.Message):
    await message.answer("‚úçÔ∏è –ü—ñ–∫—ñ—Ä “õ–∞–ª–¥—ã—Ä—ã“£—ã–∑, –±–æ—Ç —Ç—É—Ä–∞–ª—ã –æ–π—ã“£—ã–∑ –±—ñ–∑ “Ø—à—ñ–Ω –º–∞“£—ã–∑–¥—ã!")
    await bot.send_message(ADMIN_ID, f"‚úÖ –ö—ñ—Ä–¥—ñ–º –¥–µ–π–¥—ñ: @{message.from_user.username or message.from_user.full_name}")

@dp.message_handler(lambda m: m.text == "‚ùå –ö—ñ—Ä–µ –∞–ª–º–∞–¥—ã–º")
async def handle_failed_login(message: types.Message):
    await message.answer("‚ö†Ô∏è –ö—ñ—Ä—É –º“Ø–º–∫—ñ–Ω –±–æ–ª–º–∞–¥—ã –º–∞?\n–ë—ñ–∑–≥–µ –∂–∞–∑—ã“£—ã–∑: @renzokzh")
    await bot.send_message(ADMIN_ID, f"‚ùå –ö—ñ—Ä–µ –∞–ª–º–∞–¥—ã–º –¥–µ–π–¥—ñ: @{message.from_user.username or message.from_user.full_name}")

@dp.message_handler(lambda m: m.chat.id != ADMIN_ID)
async def receive_review(message: types.Message):
    await bot.send_message(ADMIN_ID, f"üí¨ @{message.from_user.username or message.from_user.full_name}:\n{message.text}")

@dp.message_handler(commands=['admin'], user_id=ADMIN_ID)
async def admin_panel(message: types.Message):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(KeyboardButton("‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è"), KeyboardButton("‚ûï –¢–æ–≤–∞—Ä"))
    kb.add(KeyboardButton("üóë –¢–∞—É–∞—Ä –∂–æ—é"), KeyboardButton("üì¶ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"))
    await message.answer("üõ† –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:", reply_markup=kb)

@dp.message_handler(text="‚ûï –ö–∞—Ç–µ–≥–æ—Ä–∏—è", user_id=ADMIN_ID)
async def add_category(message: types.Message):
    await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∞—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await PurchaseState.waiting_for_category.set()

@dp.message_handler(state=PurchaseState.waiting_for_category, user_id=ADMIN_ID)
async def save_category(message: types.Message, state: FSMContext):
    data = load_products()
    cat = message.text.strip()
    if cat not in data:
        data[cat] = []
        save_products(data)
        await message.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{cat}' “õ–æ—Å—ã–ª–¥—ã")
    else:
        await message.answer("‚ùó –ö–∞—Ç–µ–≥–æ—Ä–∏—è –±“±—Ä—ã–Ω–Ω–∞–Ω –±–∞—Ä")
    await state.finish()

@dp.message_handler(text="‚ûï –¢–æ–≤–∞—Ä", user_id=ADMIN_ID)
async def ask_category(message: types.Message):
    data = load_products()
    if not data:
        return await message.answer("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∂–æ“õ")
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in data:
        kb.add(KeyboardButton(cat))
    await message.answer("“ö–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—è“ì–∞ “õ–æ—Å–∞“£—ã–∑?", reply_markup=kb)
    await PurchaseState.waiting_for_category.set()

@dp.message_handler(state=PurchaseState.waiting_for_category, user_id=ADMIN_ID)
async def get_item_name(message: types.Message, state: FSMContext):
    await state.update_data(category=message.text.strip())
    await message.answer("–¢–∞—É–∞—Ä –∞—Ç—ã–Ω –∂–∞–∑—ã“£—ã–∑:")
    await PurchaseState.waiting_for_item.set()

@dp.message_handler(state=PurchaseState.waiting_for_item, user_id=ADMIN_ID)
async def save_item(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data['category']
    item = message.text.strip()
    products = load_products()
    if category in products:
        products[category].append(item)
        save_products(products)
        await message.answer(f"‚úÖ '{item}' “õ–æ—Å—ã–ª–¥—ã")
    await state.finish()

@dp.message_handler(text="üóë –¢–∞—É–∞—Ä –∂–æ—é", user_id=ADMIN_ID)
async def ask_delete_category(message: types.Message):
    data = load_products()
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for cat in data:
        kb.add(KeyboardButton(cat))
    await message.answer("“ö–∞–π –∫–∞—Ç–µ–≥–æ—Ä–∏—è–¥–∞–Ω —Ç–∞—É–∞—Ä –∂–æ—è—Å—ã–∑?", reply_markup=kb)
    await PurchaseState.waiting_for_category.set()

@dp.message_handler(state=PurchaseState.waiting_for_category, user_id=ADMIN_ID)
async def choose_item_to_delete(message: types.Message, state: FSMContext):
    category = message.text.strip()
    products = load_products()
    if category not in products or not products[category]:
        return await message.answer("–¢–∞—É–∞—Ä –∂–æ“õ.")
    await state.update_data(category=category)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    for item in products[category]:
        kb.add(KeyboardButton(item))
    await message.answer("“ö–∞–π —Ç–∞—É–∞—Ä–¥—ã –∂–æ—è—Å—ã–∑?", reply_markup=kb)
    await PurchaseState.waiting_for_item.set()

@dp.message_handler(state=PurchaseState.waiting_for_item, user_id=ADMIN_ID)
async def delete_item(message: types.Message, state: FSMContext):
    data = await state.get_data()
    category = data['category']
    item = message.text.strip()
    products = load_products()
    if item in products[category]:
        products[category].remove(item)
        save_products(products)
        await message.answer(f"üóë '{item}' –∂–æ–π—ã–ª–¥—ã")
    else:
        await message.answer("‚ùó –¢–∞—É–∞—Ä —Ç–∞–±—ã–ª–º–∞–¥—ã")
    await state.finish()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
